
#if 0
uint32_t uart_config;
uint32_t channel_1_config;
uint32_t channel_2_config;

void DMA_Handler()
{
    uint32_t status = in32(DMA_BASE + DMA_SR);

    if(status & DMA_CHA0_IRQ)
    {
    	out32(UART_BASE + UART_CR, uart_config | UART_TX_IRQ);
    	ChannelEnable(CHANNEL_2);
        out32(DMA_BASE + DMA_CR0, channel_1_config | CHANNEL_IR_ACK);
    }

    if(status & DMA_CHA1_IRQ)
    {
    	out32(UART_BASE + UART_CR, uart_config & ~UART_TX_IRQ);
        out32(DMA_BASE + DMA_CR1, channel_2_config | CHANNEL_IR_ACK);
    }

}

int main() {


	char Phrase_0[PHRASE_LENGHT] = "Hola como estas? no estoy dispuesto a perder la batalla mamawebo";
	char Phrase_1[PHRASE_LENGHT] = "Hola como estas? no estoy dispuesto a perder la batalla mamawebo";
	char* aux1 = Phrase_0 + 10;
	char* aux2 = Phrase_1 + 10;

	char Phrase_2[PHRASE_LENGHT];
	char Phrase_3[PHRASE_LENGHT] = "aaaaa";

	uint32_t tranAnz_1 = 15;
	uint32_t tranAnz_2 = 6;

	UART_Init(UART_BASE, 115200, 8, PARITY_NONE, STOPPBITS_10);

	//Die Source-Addresse ist Word-Aligned, die Transfer-Anzahl aber nicht durch 4 teilbar
	DMA_init(CHANNEL_1,(uint32_t)Phrase_0, (uint32_t)(Phrase_3 + 2), tranAnz_1, SPEI_SPEI, FALSE, TRUE, FALSE);
	DMA_init(CHANNEL_2, (uint32_t)Phrase_3,UART_BASE + UART_TDR, tranAnz_1, SPEI_PERI, TRUE, TRUE, TRUE);
	//DMA_init(CHANNEL_2, (uint32_t)Phrase_0,(uint32_t)Phrase_3, tranAnz_2, SPEI_SPEI, FALSE, TRUE, FALSE);

	//DMA_init(CHANNEL_1,(uint32_t)aux1, (uint32_t)Phrase_2, tranAnz_1, SPEI_SPEI, FALSE, TRUE, FALSE);
	//DMA_init(CHANNEL_2, (uint32_t)aux2,(uint32_t)Phrase_3, tranAnz_2, SPEI_SPEI, FALSE, TRUE, FALSE);

	uart_config = in32(UART_BASE + UART_CR);
	channel_1_config = in32(DMA_BASE + DMA_CR0);
	channel_2_config = in32(DMA_BASE + DMA_CR1);

	ChannelEnable(CHANNEL_1);
	ChannelEnable(CHANNEL_2);

	while(1)
	{

	}

	return 0;

}

#endif

#if 0
void DMA_Handler()
{
    uint32_t status = in32(DMA_BASE + DMA_SR);

    if(status & DMA_CHA0_IRQ)
    {
       out32(DMA_BASE + DMA_CR0, channel_1_config | CHANNEL_IR_ACK);
       ChannelEnable(CHANNEL_1);
    }

    if(status & DMA_CHA1_IRQ)
    {
        out32(DMA_BASE + DMA_CR1, channel_2_config | CHANNEL_IR_ACK);

    }

}

//Satz = "Diese Kuh" -> 10 Bytes sollen in das Feld Phrase_0 kopiert werden (ACHTUNG '\0' wird nicht am Ende kopiert)
int main() {


	char Phrase_0[PHRASE_LENGHT];
	uint32_t tranAnz = 10;

	UART_Init(UART_BASE, 115200, 8, PARITY_NONE, STOPPBITS_10);
	DMA_init(CHANNEL_1, UART_BASE + UART_RDR,(uint32_t)Phrase_0, tranAnz, PERI_SPEI, TRUE, TRUE, TRUE);

	channel_1_config = in32(DMA_BASE + DMA_CR0);
	channel_2_config = in32(DMA_BASE + DMA_CR1);

	ChannelEnable(CHANNEL_1);

	while(1)
	{
		channel_1_config = in32(DMA_BASE + DMA_CR0);
	}

return 0;
}

#endif

//Aus einem Feld werden Bytes an den Computer per UART gesendet
#if 0
	void DMA_Handler()
	{
	    uint32_t status = in32(DMA_BASE + DMA_SR);

	    if(status & DMA_CHA0_IRQ)
	    {
	       out32(DMA_BASE + DMA_CR0, channel_1_config | CHANNEL_IR_ACK);
	    }

	    if(status & DMA_CHA1_IRQ)
	    {
	        out32(DMA_BASE + DMA_CR1, channel_2_config | CHANNEL_IR_ACK);

	    }

	}

int main() {

	char Phrase[PHRASE_LENGHT] = "Hallo Leute, dies ist ein Test fuer die Hausarbeit";
	UART_Init(UART_BASE, 115200, 8, PARITY_NONE, STOPPBITS_10);

	DMA_init(CHANNEL_2, (uint32_t)Phrase, UART_BASE + UART_TDR, 18, SPEI_PERI, TRUE, TRUE, TRUE);

	uart_config = in32(UART_BASE + UART_CR);
	out32(UART_BASE + UART_CR, uart_config | UART_TX_IRQ);
	channel_1_config = in32(DMA_BASE + DMA_CR0);
	channel_2_config = in32(DMA_BASE + DMA_CR1);

	ChannelEnable(CHANNEL_2);

	while(1)
	{

	}

	return 0;
}

#endif



------------------------------------------------------------------------



//Old version
#if 0
int main()
{
	UART_Init(UART_BASE, 115200, 8, PARITY_NONE, STOPPBITS_10);

	out32(GPIO_BASE+GPIO_DIR,0xF0);
	uint32_t input;
	uint32_t output;
	while(1) {

		output = 0;
		int32_t c = inbyte();
		if(-1 != c)
		{
			if('a' == c)
				c = 'A';
			outbyte(c);

		}
		input = in32(GPIO_BASE + GPIO_PINS);
		for (int i =0; i<4;i++)
		{
			if (input & (1<<i))
				output |= (1<<i);
		}

		out32(GPIO_BASE+GPIO_DATA,(output << 4));

	}

	return 0;
}
#endif

